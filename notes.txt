#Forum

1. Thread
2. Reply
3. User

A. Thread is created by a User
B. A reply belongs to a thread, and belongs to a user.


First class:
                1. Thread Migration, Controller and Model were created
		        2. Initial Database Setup
		        3. Reply Migration, Controller and Model were created
		        4. ThreadFactory created
		        5. ReplyFactory created

Second class:
                1. ThreadTest created
                    a. Test 1: a_user_can_view_all_threads()
                    b. Test 2: a_user_can_read_a_single_thread()
                    note: make sure to write /** @test */ before each test
                2. Create a local testing environment in phpunit.xml (sqlite database without file, just memory)
                3. Route GET '/threads' created (ThreadsController@index)
                4. Controllers name changed for
                    a. ThreadController -> ThreadsController
                    b. ReplyController -> RepliesController
                5. View threads.index created
                6. Authentication scaffolding generated
                7. View index.threads created (I needed to use "composer dump-autoload" to show the page)
                8. Route GET '/threads/{thread}' created (ThreadsController@show)
                9. View threads.show created
                *10. $thread->path shortcut (path function was created at Thread Model)

Third class:
                *0. Laracon - How dd() can be useful to work with testing (dd() commented at Thread Model)
                1. Rename ThreadsTest to ReadThreadsTest
                2. Create a need test inside "ReadThreadsTest"
                    a. a_user_can_read_replies_that_are_associated_with_a_thread()
                3. A setUp function was created to avoid create a Thread over and over
                4. We can refectory it and get rid of the temporary variables "$response" and put everything inline.
                5. View threads.show.blade.php changed. Show the replies for each thread on the screen.
                6. Create a relationship between Thread and Replies on the Thread Model. !! One-to-many relationship !!
                    a. A thread has many replies
                    b. A reply belongs to a Thread.
                7. ReplyTest created to ensure that the relationship between owner an reply does exist.
                8. Create a relationship (public function owner()) between Reply and User on the Reply Model. !! One-to-many relationship !!
                    a. A User has many Replies
                    b. A Reply belongs to an User.
                9. Create a link to User's profile that will be created in the future

Forth class:
                1. View threads.reply created for the reply HTML (code was extracted from threads.show)
                2. Add 'protected $thread;' on ReadThreadsTest
                3. ThreadTest created
                    a. a_thread_has_replies()       To make sure the relationship returns the proper collection
                    b. a_thread_has_a_creator()
                4. Create a relationship (public function creator()) between a Thread and User on the Thread Model !! One-to-many relationship !!
                    a. An User has many Threads
                    b. A Thread belongs to an User
                5. ParticipateInForumTest created
                    a. an_authenticated_user_may_participate_in_forum_threads()
                6. Helper method path() used to simplify code at Test models
                7. Route POST '/threads/{thread}/replies' created (RepliesControler@store)
                8. store method was created at RepliesController
                9. addReply() was created at ThreadController

Fifth class:
                1. Create a Reply Form at threads.show.blade.php
                2. Temporary padding.bottom at layouts.app
                3. The name of the app was changed to Forum at config/app.php

Sixth class:
                1. CreateThreadsTest created
                    a. an_authenticated_user_can_create_new_forum_threads
                    b. guests_may_not_create_threads
                2. Test name changed:
                    a. ParticipateInThreadsTest -> ThreadsController
                3. Route POST'/threads' created (ThreadsController@store)
                4. Forth Class Error was fixed

Seventh class:
                1. Update composer's autoload -> Tests/Utilities/functions.php
                2. Testing helpers file "function.php" created
                    a. create
                    b. make
                3. SignIn() method created at TestCase.php
                4. Snippet created for "testclass"





